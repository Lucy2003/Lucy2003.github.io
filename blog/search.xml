<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arduino 单片机开发之入坑</title>
    <url>/blog/articles/Arduino/Arduino_0/</url>
    <content><![CDATA[<a class="fancybox" data-fancybox="gallery"  href="arduino.jpg" data-caption="Arduino" style="display:contents"><img src="https://cdn.jsdelivr.net/gh/lucy2003/lucy2003.github.io@master/blog/images/loading.gif" data-original="arduino.jpg" alt="Arduino"></a><span class="caption">Arduino</span>

<h3 id="简介与开发环境"><a href="#简介与开发环境" class="headerlink" title="简介与开发环境"></a>简介与开发环境</h3><p>首先，Arduino是一种单片机开发板，其MCU大部分基于AVR架构，采用串口下载，板载USB转串口芯片，下载时可自动复位，无需手动重置；开发板大多支持7 ~ 12 V DC 供电以及5V USB供电。</p>
<p>要开发它，首先要安装Arduino的IDE<a id="more"></a> (或者安装atmel公司提供的开发环境)，接着安装开发板USB转串口芯片的驱动程序,然后在Arduino IDE中的工具-开发板选择你的开发板型号(我这里用的是基于Atmega328P的Uno)，就可以愉快地coding了！</p>
<h3 id="程序代码结构"><a href="#程序代码结构" class="headerlink" title="程序代码结构"></a>程序代码结构</h3><p>Arduino是基于精简的C++的，所以他支持对象，但是对于STL的支持并不完整！</p>
<p>Arduino的工程文件后缀名为.ino，相当于.cpp（实际上，在编译时预处理器会把工程目录下的所有文件复制到临时文件夹并改名.ino为.cpp），工程目录文件夹名需与主ino文件名相同。</p>
<p>当你新建一个工程时，默认有两个函数，如下:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个函数没有返回值，也没有入口参数，且不可更改名称。为啥？因为Arduino是在核心文件里包含工程文件来实现编译的，核心文件里就是这样定义这两个函数的，要改了的话会报错（改核心文件另说）。其中setup函数只在板子上电或重置时执行一次，loop则在setup后无限循环。</p>
<h3 id="第一个闪灯程序"><a href="#第一个闪灯程序" class="headerlink" title="第一个闪灯程序"></a>第一个闪灯程序</h3><p>在文件-示例-Basics里找到Blink程序，如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LED_BUILTIN 是板载LED的引脚号，是自动定义的，不用管直接用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化LED引脚为OUTPUT</span></span><br><span class="line">  <span class="comment">//Arduino的引脚有3种模式，分别为</span></span><br><span class="line">  <span class="comment">//  OUTPUT  输出模式，向外输出电流，单个引脚最大40mA</span></span><br><span class="line">  <span class="comment">//  INPUT   输入模式，引脚为高阻抗态，对外部电平变化敏感</span></span><br><span class="line">  <span class="comment">//  INPUT_PULLUP  与INPUT作用相同，只是多开启了内部的10k上拉电阻</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="literal">LED_BUILTIN</span>, <span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="literal">LED_BUILTIN</span>, <span class="literal">HIGH</span>);   <span class="comment">// 将LED引脚电平配置为高(HIGH=1)</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                       <span class="comment">// 等待1000毫秒</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="literal">LED_BUILTIN</span>, <span class="literal">LOW</span>);    <span class="comment">// LED引脚电平配置为低(LOW=0)</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                       <span class="comment">// 等待1000毫秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插上你的开发板的USB线，等待电脑识别后在工具-端口里选择对应串口，按Ctrl+U进行编译并下载，下载完成后，你就可以看到开发板上的LED亮一秒灭一秒地闪烁了。</p>
]]></content>
      <categories>
        <category>单片机编程</category>
        <category>Arduino编程</category>
      </categories>
      <tags>
        <tag>C++语言</tag>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>C51 单片机开发之开发环境搭建</title>
    <url>/blog/articles/C51/C51_0/</url>
    <content><![CDATA[<h3 id="C51单片机简介"><a href="#C51单片机简介" class="headerlink" title="C51单片机简介"></a>C51单片机简介</h3><h6 id="——【未完成】——"><a href="#——【未完成】——" class="headerlink" title="——【未完成】——"></a>——【未完成】——</h6><p>C51单片机，很老了，其基于 Intel 的 8051 内核，采用 C 语言开发。</p>
<p>下面说一下我将要使用的单片机基本信息:</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="center">项目</th>
<th align="center">属性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单片机名称</td>
<td align="center">STC8F1K08(S2)</td>
</tr>
<tr>
<td align="center">封装</td>
<td align="center">SOP-8 或 SOP-16</td>
</tr>
<tr>
<td align="center">内存</td>
<td align="center">128Byte data,128Byte idata,1024Byte xdata</td>
</tr>
<tr>
<td align="center">代码容量</td>
<td align="center">8KB</td>
</tr>
<tr>
<td align="center">EEPROM</td>
<td align="center">Flash模拟,3KB</td>
</tr>
<tr>
<td align="center">串口,IIC,SPI</td>
<td align="center">x1,x1,x1</td>
</tr>
<tr>
<td align="center">备注</td>
<td align="center">SOP-8封装版本的SPI少两根线，无法使用</td>
</tr>
</tbody></table>
<h3 id="开发环境搭建–软硬件准备"><a href="#开发环境搭建–软硬件准备" class="headerlink" title="开发环境搭建–软硬件准备"></a>开发环境搭建–软硬件准备</h3><p>  我开发用的硬件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STC8F1k08 SOP16封装或SOP8封装的芯片(使用串口下载程序)</span><br><span class="line">Arduino Uno (其上有一个USB转串口的芯片CH340G可以利用，节省成本)(待测试)</span><br><span class="line">PC (Windows 7 64位)</span><br></pre></td></tr></table></figure>
<div class="bs-callout bs-callout-warning"><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>我使用的STC8F1k08内置RC振荡器，无需外部晶振！其他51单片机请自行搜索并搭建最小系统电路！</p>
</div>
<p>开发用软件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Keil uVision4</span><br><span class="line">STC-ISP (烧写工具)</span><br></pre></td></tr></table></figure>

<p> <a href="http://www.stcmcu.com" title="下载地址">下载烧写工具</a></p>
<p>安装好之后，就已完成环境的搭建，可以写代码了。</p>
]]></content>
      <categories>
        <category>单片机编程</category>
        <category>C51(STC)</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeblocks wxWidgets 安装与配置</title>
    <url>/blog/articles/CPP/wxWidgetsInit/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.wxwidgets.org">wxWidgets</a>是一个基于C++的GUI库，支持动、静态链接方式，还可以支持OpenGL！</p>
<p>本篇记录我的配置过程。</p>
<a id="more"></a>

<h2 id="下载与编译"><a href="#下载与编译" class="headerlink" title="下载与编译"></a>下载与编译</h2><p>用到的软件（Win7下）：</p>
<ul>
<li>Codeblocks 17.12  （附带GCC 5.10）</li>
<li>wxWidgets 2.8.12</li>
</ul>
<ol>
<li><p>安装Codeblocks,并把Codeblocks安装目录下的MinGW\bin添加到path环境变量；</p>
</li>
<li><p>到<a href="https://github.com/wxWidgets/wxWidgets/releases/download/v2.8.12/wxWidgets-2.8.12.tar.gz">这里</a>下载v2.8.12版的源码（其他版本请到简介中的链接下载）；</p>
</li>
<li><p>下载好之后，把它解压到C:\下，然后新建一个build.bat，命令如下：</p>
</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off  </span><br><span class="line">　　<span class="built_in">cd</span> build/msw  </span><br><span class="line">　　title Compile wxWidgets  </span><br><span class="line">　　<span class="built_in">echo</span> <span class="built_in">Start</span> Compile ...  </span><br><span class="line">　　<span class="built_in">echo</span> ---------------------------------------------------------------------  </span><br><span class="line"></span><br><span class="line">　　<span class="built_in">echo</span> Compile Release Version</span><br><span class="line">　　:: SHARED=<span class="number">0</span>, <span class="keyword">Static</span> Link Library. SHARED=<span class="number">1</span>, Dynamic Link Library.</span><br><span class="line">　　:: MONOLITHIC=<span class="number">0</span>, Multiple Widgets. MONOLITHIC=<span class="number">1</span>, Single Widgets.</span><br><span class="line">　　:: UNICODE=<span class="number">0</span>, Not Support Unicode. Unicode=<span class="number">1</span>, Support Unicode.</span><br><span class="line">    title Building <span class="keyword">Static</span> Libs...</span><br><span class="line">　　mingw32<span class="literal">-make</span> <span class="operator">-f</span> makefile.gcc BUILD=release SHARED=<span class="number">0</span> MONOLITHIC=<span class="number">0</span> UNICODE=<span class="number">1</span>  || goto fail</span><br><span class="line">    title Buiding DLLs...</span><br><span class="line">    mingw32<span class="literal">-make</span> <span class="operator">-f</span> makefile.gcc BUILD=release SHARED=<span class="number">1</span> MONOLITHIC=<span class="number">0</span> UNICODE=<span class="number">1</span>  || goto fail</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">echo</span> ---------------------------------------------------------------------  </span><br><span class="line">　　<span class="built_in">echo</span> Compile Succeed.</span><br><span class="line">　　pause  </span><br><span class="line">goto eof</span><br><span class="line"></span><br><span class="line">:fail</span><br><span class="line"><span class="built_in">echo</span> Build Failed!</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:eof</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>然后保存并运行，等待编译完成（大概要1小时）；</p>
<h2 id="设置Codeblocks"><a href="#设置Codeblocks" class="headerlink" title="设置Codeblocks"></a>设置Codeblocks</h2><ol>
<li>打开Codeblocks（请不要开中文！请不要开中文！请不要开中文！）</li>
<li>新建一个wxWidgets项目；</li>
<li>选择2.8.x；</li>
<li>输入项目名称……；</li>
<li>输入作者信息；</li>
<li>选择wxSmith和Dialog Based；</li>
<li>将输入框内容改成 $(#wxStatic)，点击下一步；</li>
<li>这时候弹出一个环境变量的设置对话框，照着改；<ul>
<li>点击clone,输入  $(#wxStatic)</li>
<li>把 base 设成 C:\wxWidgets-2.8.12</li>
<li>把 include 设成 C:\wxWidgets-2.8.12\include</li>
<li>把 lib 设成 C:\wxWidgets-2.8.12\lib\gcc_lib</li>
<li>然后点击clone，输入 wxDll，确定</li>
<li>把 clone 得到的项的lib设置成 C:\wxWidgets-2.8.12\lib\gcc_dll</li>
</ul>
</li>
</ol>
<p>以后要以静态链接编译就输入 $(#wxStatic) ，反之亦然；<br>9. 点击close，再点击next；<br>10. wxWidgets Library Settings 的第一个选项，如果是动态链接就打钩，反之亦然；然后打钩第三个；点击next；<br>11. 这时由于我们没有编译debug版本的库，会弹出对话框让我们确认，确认就行；<br>12. 在这页选择要包含的库，用到再选，这里示例不用选，点击Finish。</p>
<p>这时就进入了工程页面，按个F9编译运行一下，成功了！</p>
]]></content>
      <categories>
        <category>C++编程</category>
        <category>GUI</category>
      </categories>
      <tags>
        <tag>C++语言</tag>
        <tag>wxWidgets</tag>
        <tag>Codeblocks</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266（ESP32）开发之入坑</title>
    <url>/blog/articles/ESP8266_ESP32/ESP_0/</url>
    <content><![CDATA[<h3 id="简介与开发环境"><a href="#简介与开发环境" class="headerlink" title="简介与开发环境"></a>简介与开发环境</h3><p>首先，ESP8266/ESP32 是一款WiFi芯片，后者还带有蓝牙功能。有关的更多信息，请到<a href="https://www.espressif.com/">官网</a>查看。</p>
<p>开发它的方式：</p>
<ul>
<li><p>通过安装 <a href="https://github.com/esp8266/Arduino">ESP8266</a> /<a href="https://github.com/espressif/arduino-esp32""">ESP32</a> for Arduino Core从而在Arduino IDE 里进行开发</p>
</li>
<li><p>通过安装 <a href="https://github.com/espressif/esp-idf">ESP-IDF</a> 开发（难度较大）</p>
</li>
</ul>
<a id="more"></a>

<div class="bs-callout bs-callout-info"><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>请务必按照官网的操作说明进行安装！</p>
</div>

<h3 id="关于我所使用的开发板及环境"><a href="#关于我所使用的开发板及环境" class="headerlink" title="关于我所使用的开发板及环境"></a>关于我所使用的开发板及环境</h3><p>我使用 Wemos D1 作为ESP8266的开发板，其上的芯片为 ESP8266-12 ，有9个IO口。<br>我使用 ESP32 Dev Kit 作为ESP32的开发板，其上为 ESP32 Dev Module ，无 PSRAM。<br>开发方式选用 Arduino IDE 。</p>
]]></content>
      <categories>
        <category>单片机编程</category>
        <category>ESP8266(ESP32)编程</category>
      </categories>
      <tags>
        <tag>C++语言</tag>
        <tag>ESP8266(ESP32)</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派NTP服务器搭建</title>
    <url>/blog/articles/RasPi/RasPi_NTP_SERVER/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>树莓派，已经配置好网络的</li>
<li>Xshell （鼠标键盘也行）</li>
</ul>
<a id="more"></a>

<h2 id="安装NTP服务器"><a href="#安装NTP服务器" class="headerlink" title="安装NTP服务器"></a>安装NTP服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">apt-get install ntp</span><br><span class="line">apt-get install ufw  <span class="comment">#防火墙配置程序</span></span><br></pre></td></tr></table></figure>

<h2 id="配置NTP服务器-sudo下"><a href="#配置NTP服务器-sudo下" class="headerlink" title="配置NTP服务器(sudo下)"></a>配置NTP服务器(sudo下)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/ntp.conf</span><br></pre></td></tr></table></figure>

<p>然后照着下面的中文注释改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;etc&#x2F;ntp.conf, configuration for ntpd; see ntp.conf(5) for help</span><br><span class="line"></span><br><span class="line">driftfile &#x2F;var&#x2F;lib&#x2F;ntp&#x2F;ntp.drift</span><br><span class="line"></span><br><span class="line"># Leap seconds definition provided by tzdata</span><br><span class="line">leapfile &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;leap-seconds.list</span><br><span class="line"></span><br><span class="line"># Enable this if you want statistics to be logged.</span><br><span class="line">#statsdir &#x2F;var&#x2F;log&#x2F;ntpstats&#x2F;</span><br><span class="line"></span><br><span class="line">statistics loopstats peerstats clockstats</span><br><span class="line">filegen loopstats file loopstats type day enable</span><br><span class="line">filegen peerstats file peerstats type day enable</span><br><span class="line">filegen clockstats file clockstats type day enable</span><br><span class="line"></span><br><span class="line"># You do need to talk to an NTP server or two (or three).</span><br><span class="line">#server ntp.your-provider.example</span><br><span class="line">server ntp.ntsc.ac.cn  #这里写要同步的服务器地址</span><br><span class="line"></span><br><span class="line"># pool.ntp.org maps to about 1000 low-stratum NTP servers.  Your server will</span><br><span class="line"># pick a different set every time it starts up.  Please consider joining the</span><br><span class="line"># pool: &lt;http:&#x2F;&#x2F;www.pool.ntp.org&#x2F;join.html&gt;</span><br><span class="line">pool 0.debian.pool.ntp.org iburst</span><br><span class="line">pool 1.debian.pool.ntp.org iburst</span><br><span class="line">pool 2.debian.pool.ntp.org iburst</span><br><span class="line">pool 3.debian.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line"># Access control configuration; see &#x2F;usr&#x2F;share&#x2F;doc&#x2F;ntp-doc&#x2F;html&#x2F;accopt.html for</span><br><span class="line"># details.  The web page &lt;http:&#x2F;&#x2F;support.ntp.org&#x2F;bin&#x2F;view&#x2F;Support&#x2F;AccessRestrictions&gt;</span><br><span class="line"># might also be helpful.</span><br><span class="line">#</span><br><span class="line"># Note that &quot;restrict&quot; applies to both servers and clients, so a configuration</span><br><span class="line"># that might be intended to block requests from certain clients could also end</span><br><span class="line"># up blocking replies from your own upstream servers.</span><br><span class="line"></span><br><span class="line"># By default, exchange time with everybody, but don&#39;t allow configuration.</span><br><span class="line">restrict -4 default kod notrap nomodify nopeer noquery limited</span><br><span class="line">restrict -6 default kod notrap nomodify nopeer noquery limited</span><br><span class="line"></span><br><span class="line">restrict 192.168.10.0 mask 255.255.255.0 nomodify </span><br><span class="line"># 上面的一行是限制访问，格式： </span><br><span class="line"># restrict &lt;IP地址，请填写本网地址，并把最后一个byte改成0&gt; mask &lt;子网掩码&gt; nomodify</span><br><span class="line">#</span><br><span class="line"># nomodify是不允许客户端更改，允许对时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Local users may interrogate the ntp server more closely.</span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict ::1</span><br><span class="line"></span><br><span class="line"># Needed for adding pool entries</span><br><span class="line">restrict source notrap nomodify noquery</span><br><span class="line"></span><br><span class="line"># Clients from this (example!) subnet have unlimited access, but only if</span><br><span class="line"># cryptographically authenticated.</span><br><span class="line">#restrict 192.168.123.0 mask 255.255.255.0 notrust</span><br><span class="line"></span><br><span class="line">......省略...........</span><br></pre></td></tr></table></figure>

<p>保存退出。</p>
<p>然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ntp restart</span><br><span class="line">ps -ef | grep ntp</span><br></pre></td></tr></table></figure>

<p>看到下面的内容，就配置好了NTP服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntp        1066      1  0 18:10 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;ntpd -p &#x2F;var&#x2F;run&#x2F;ntpd.pid -g -u 104:110</span><br><span class="line">pi         1069   1034  0 18:10 pts&#x2F;0    00:00:00 grep --color&#x3D;auto ntp</span><br></pre></td></tr></table></figure>


<h2 id="配置防火墙-sudo下"><a href="#配置防火墙-sudo下" class="headerlink" title="配置防火墙(sudo下)"></a>配置防火墙(sudo下)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">ufw deny</span><br><span class="line">ufw allow 123/udp <span class="comment">#开启UDP协议123端口</span></span><br><span class="line">ufw allow 22/tcp  <span class="comment">#开启ssh端口</span></span><br></pre></td></tr></table></figure>

<p>然后你会看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">123&#x2F;udp                    ALLOW       Anywhere                  </span><br><span class="line">22&#x2F;tcp                     ALLOW       Anywhere                  </span><br><span class="line">123&#x2F;udp (v6)               ALLOW       Anywhere (v6)             </span><br><span class="line">22&#x2F;tcp (v6)                ALLOW       Anywhere (v6)             </span><br></pre></td></tr></table></figure>


<p>好了，现在重启系统(sudo reboot)，就OK了！</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>NTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery 的使用</title>
    <url>/blog/articles/html/jquery-1/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JQuery是一个开源的前端JS框架，能简化许多操作，比如 ajax 。。。<br>要使用他，只需要引入一个90KB左右的 JS 文档，网上的cdn多的是，本站也在用。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><a id="more"></a>
<p>(这里简单写写目前我用到的东西)</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>首先，你需要用<code>&lt;script&gt;</code>标签引入他，才能正常使用，像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你在引入之前就使用它的语句，会报错，比如下面的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;html&quot;</span>).html(<span class="string">&quot;&lt;h1&gt;Hello,World&lt;//h1&gt;&quot;</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>JQuery几乎所有的函数都是以$开头的，如果安装了早期版本的兼容性插件，还可能以$$开头。</p>
<p>目前用的最多的就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;元素选择器&quot;</span>).attr(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;值&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>元素选择器可以是：</p>
<ul>
<li><p>元素名称，如 “html” ,”body” …</p>
</li>
<li><p>元素ID,在ID前加一个”#”表示通过ID选择要操作的元素，如 “#main” 表示选择页面中所有ID=”main的元素”；</p>
</li>
<li><p>元素的类(Class),在Class之前加一个”.”表示通过类选择元素，如”.span8”表示选择页面中所有Class=”span8”的元素。</p>
</li>
</ul>
<p>元素选择器之后有一个”.”，表示访问他的成员函数（这和VB有点像）</p>
<p>常用的成员函数（方法）有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">attr(<span class="string">&quot;属性&quot;</span>，<span class="string">&quot;值&quot;</span>)    <span class="comment">//将元素的属性设置为值     </span></span><br><span class="line">css(<span class="string">&quot;属性&quot;</span>，<span class="string">&quot;值&quot;</span>)     <span class="comment">//将元素的CSS的某个属性改为值 </span></span><br><span class="line">html(<span class="string">&quot;值&quot;</span>)           <span class="comment">//将元素内的html改为值</span></span><br></pre></td></tr></table></figure>

<p>如果上述函数括号内的“值”为空，则返回选定元素当前的属性值。</p>
<h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成 !"></a>未完成 !</h3>]]></content>
      <categories>
        <category>Html</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Html</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
